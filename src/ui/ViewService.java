package ui;

import dao.ConnectionProvider;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author HOME
 */
public class ViewService extends javax.swing.JFrame {

    private String username = null;

    /**
     * Creates new form ViewService
     */
    public ViewService() {
        initComponents();
    }

    public ViewService(String tempUsername) {
        initComponents();
        username = tempUsername;
        setSize(850, 500);
        setLocationRelativeTo(null);
    }

    private void loadAllData() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Limpia la tabla antes de cargar los datos

        // Query para seleccionar datos de la tabla "services" ordenados por "lastModified" de forma descendente
        String query = "SELECT service_pk, motorbike_pk, state, totalPrice, lastModified FROM services ORDER BY lastModified DESC";

        try (Connection con = ConnectionProvider.getCon(); PreparedStatement ps = con.prepareStatement(query); ResultSet rs = ps.executeQuery()) {

            // Iterar sobre el ResultSet y agregar las filas al modelo de la tabla
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getLong("service_pk"),
                    rs.getString("motorbike_pk"),
                    rs.getLong("totalPrice"),
                    rs.getString("state"),
                    rs.getTimestamp("lastModified")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void applyFilters() {
        String filterPlate = txtFilterPlate.getText().trim();
        String selectedState = comboServiceState.getSelectedItem().toString();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Limpia la tabla antes de cargar los datos filtrados

        StringBuilder query = new StringBuilder("SELECT service_pk, motorbike_pk, state, totalPrice, lastModified FROM services WHERE 1=1");
        if (!filterPlate.isEmpty()) {
            query.append(" AND motorbike_pk LIKE ?");
        }
        if (!selectedState.equals("Todos")) {
            query.append(" AND state = ?");
        }
        query.append(" ORDER BY lastModified DESC");

        try (Connection con = ConnectionProvider.getCon(); PreparedStatement ps = con.prepareStatement(query.toString())) {
            int paramIndex = 1;
            if (!filterPlate.isEmpty()) {
                ps.setString(paramIndex++, "%" + filterPlate + "%");
            }
            if (!selectedState.equals("Todos")) {
                ps.setString(paramIndex++, selectedState);
            }

            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getLong("service_pk"),
                        rs.getString("motorbike_pk"),
                        rs.getLong("totalPrice"),
                        rs.getString("state"),
                        rs.getTimestamp("lastModified")
                    });
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtFilterPlate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        comboServiceState = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Consultar Servicios");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 6, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        jLabel2.setToolTipText("");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(804, 6, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 56, 850, 10));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID de servicio", "Vehículo", "Precio Total", "Estado", "Última modificación"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 121, 838, 336));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Filtrar por placa de vehículo");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 83, -1, -1));

        txtFilterPlate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtFilterPlate.setForeground(new java.awt.Color(0, 0, 0));
        txtFilterPlate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFilterPlateKeyReleased(evt);
            }
        });
        getContentPane().add(txtFilterPlate, new org.netbeans.lib.awtextra.AbsoluteConstraints(192, 79, 200, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Filtrar por estado");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(429, 83, -1, -1));

        comboServiceState.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboServiceState.setForeground(new java.awt.Color(0, 0, 0));
        comboServiceState.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "En proceso", "Terminado" }));
        comboServiceState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboServiceStateActionPerformed(evt);
            }
        });
        getContentPane().add(comboServiceState, new org.netbeans.lib.awtextra.AbsoluteConstraints(541, 78, 220, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Seleccione la fila a eliminar");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 469, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/all_pages_background.png"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        loadAllData();
    }//GEN-LAST:event_formComponentShown

    private void txtFilterPlateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterPlateKeyReleased
        //filtrar por placa
        applyFilters();
    }//GEN-LAST:event_txtFilterPlateKeyReleased

    private void comboServiceStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboServiceStateActionPerformed
        // filtrar por estado del servicio
        applyFilters();
    }//GEN-LAST:event_comboServiceStateActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // Eliminar servicio con validación de rol
        int index = jTable1.getSelectedRow();
        TableModel model = jTable1.getModel();
        String serviceId = model.getValueAt(index, 0).toString(); // Cambiar si el ID está en otra columna

        String userRole = "";
        String roleQuery = "SELECT userRole FROM appusers WHERE username = ?";

        try (Connection con = ConnectionProvider.getCon(); PreparedStatement ps = con.prepareStatement(roleQuery)) {
            ps.setString(1, username);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    userRole = rs.getString("userRole");
                } else {
                    JOptionPane.showMessageDialog(null, "No se encontró información para el usuario actual.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al consultar el rol del usuario: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validar el rol
        if (!"Administrador".equalsIgnoreCase(userRole)) {
            JOptionPane.showMessageDialog(null, "No tienes permiso para eliminar servicios.",
                    "Permiso denegado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Confirmar y eliminar servicio
        int a = JOptionPane.showOptionDialog(null, "¿Quieres eliminar este servicio?", "Selecciona una opción",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Sí", "No"}, "Sí");

        if (a == 0) {
            // Primero, obtener los productos asociados al servicio desde la tabla soldProducts_services
            String getProductsQuery = "SELECT soldProduct_pk FROM soldProducts_services WHERE service_pk = ?";

            try (Connection con = ConnectionProvider.getCon()) {
                try (PreparedStatement ps = con.prepareStatement(getProductsQuery)) {
                    ps.setString(1, serviceId);

                    try (ResultSet rs = ps.executeQuery()) {
                        while (rs.next()) {
                            long soldProductPk = rs.getLong("soldProduct_pk");

                            // Obtener la cantidad vendida y el product_pk desde la tabla soldProducts
                            String getQuantityQuery = "SELECT quantity, product_pk FROM soldProducts WHERE soldProduct_pk = ?";
                            try (PreparedStatement psQuantity = con.prepareStatement(getQuantityQuery)) {
                                psQuantity.setLong(1, soldProductPk);

                                try (ResultSet rsQuantity = psQuantity.executeQuery()) {
                                    if (rsQuantity.next()) {
                                        int quantitySold = rsQuantity.getInt("quantity");
                                        long productPk = rsQuantity.getLong("product_pk");

                                        // Restablecer la cantidad en la tabla products
                                        String updateInventoryQuery = "UPDATE products SET quantity = quantity + ? WHERE product_pk = ?";
                                        try (PreparedStatement psUpdate = con.prepareStatement(updateInventoryQuery)) {
                                            psUpdate.setInt(1, quantitySold); // Añadir cantidad vendida al inventario
                                            psUpdate.setLong(2, productPk); // ID del producto
                                            psUpdate.executeUpdate();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // Eliminar el servicio
                String deleteServiceQuery = "DELETE FROM services WHERE service_pk = ?";
                try (PreparedStatement psDelete = con.prepareStatement(deleteServiceQuery)) {
                    psDelete.setString(1, serviceId);

                    int rowsAffected = psDelete.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(null, "¡Servicio eliminado exitosamente!", "Éxito",
                                JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                        new ViewService(username).setVisible(true); // Cambiar a la vista de servicios
                    } else {
                        JOptionPane.showMessageDialog(null, "¡No se encontró el servicio para eliminar!", "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al procesar la eliminación del servicio: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewService().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboServiceState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtFilterPlate;
    // End of variables declaration//GEN-END:variables
}

package ui;


import dao.ConnectionProvider;
import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.ImageIcon;
import common.Validations;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import ui.help.AddProductHelp;

public class AddProduct extends javax.swing.JFrame {

    private Boolean checkProductID = false;

    /**
     * Creates new form AddMedicine
     */
    public AddProduct() {
        initComponents();
        loadCategories();
        setSize(850,500);
        iconLabel.setVisible(false);
        setLocationRelativeTo(null);
        
        //establecer icono
        setImage();
    }
    
    //icono de la aplicación
    public void setImage() {
        try {
            InputStream imgStream = getClass().getResourceAsStream("/images/icono.png");
            if (imgStream != null) {
                setIconImage(ImageIO.read(imgStream));
            } else {
                System.out.println("Icono no encontrado");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void loadCategories() {
        //cargar las categorias de productos en el jComboBox
        String query = "SELECT categoryName FROM productCategories";
        try (Connection con = ConnectionProvider.getCon(); 
                PreparedStatement pst = con.prepareStatement(query); 
                ResultSet rs = pst.executeQuery()) {

            comboCategory.removeAllItems();
            comboCategory.addItem("Seleccionar");

            while (rs.next()) {
                comboCategory.addItem(rs.getString("categoryName"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar las categorías: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        txtUniqueId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtProductName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtSellingPrice = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        comboCategory = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txtNewCategory = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtAcquiredPrice = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        iconLabel = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Añadir Producto");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 6, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 56, 850, 10));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("ID del Producto *");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 125, -1, -1));

        txtUniqueId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtUniqueId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUniqueIdKeyReleased(evt);
            }
        });
        getContentPane().add(txtUniqueId, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 145, 300, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Descripción *");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 315, -1, -1));

        txtDescription.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(txtDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 335, 300, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Marca");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 376, -1, -1));

        txtProductName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(txtProductName, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 396, 300, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Cantidad de unidades adquiridas *");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 125, -1, -1));

        txtQuantity.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantityKeyReleased(evt);
            }
        });
        getContentPane().add(txtQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 145, 300, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Precio de venta (Unidad - sin puntos ni comas) *");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 255, -1, -1));

        txtSellingPrice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtSellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSellingPriceKeyReleased(evt);
            }
        });
        getContentPane().add(txtSellingPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 272, 300, -1));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 0));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        jButton2.setText("Guardar");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton2.setIconTextGap(10);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 365, 110, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Seleccione una categoría *");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 195, -1, -1));

        comboCategory.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboCategory.setForeground(new java.awt.Color(0, 0, 0));
        comboCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Item 2", "Item 3", "Item 4" }));
        comboCategory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(comboCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 215, 300, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Añadir nueva categoría");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 255, -1, -1));

        txtNewCategory.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNewCategory.setForeground(new java.awt.Color(0, 0, 0));
        getContentPane().add(txtNewCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 275, 200, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Precio Adquirido (sin puntos ni comas)*");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 195, -1, -1));

        txtAcquiredPrice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtAcquiredPrice.setForeground(new java.awt.Color(0, 0, 0));
        txtAcquiredPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAcquiredPriceKeyReleased(evt);
            }
        });
        getContentPane().add(txtAcquiredPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 215, 300, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Ubicación en almacén *");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 315, -1, -1));

        txtLocation.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtLocation.setForeground(new java.awt.Color(0, 0, 0));
        getContentPane().add(txtLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 335, 300, -1));

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 0, 0));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addIcon.png"))); // NOI18N
        jButton3.setText("Añadir");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(292, 272, 94, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("(*) Indica campo obligatorio");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 455, -1, -1));

        iconLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        iconLabel.setForeground(new java.awt.Color(0, 0, 0));
        iconLabel.setText("---");
        getContentPane().add(iconLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, -1, -1));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        jLabel14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(804, 6, -1, -1));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/help.png"))); // NOI18N
        jLabel13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(768, 14, -1, -1));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/whiteSmoke.jpg"))); // NOI18N
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //botón para guardar los productos
        String uniqueId = txtUniqueId.getText().trim();
        String selectedCategory = comboCategory.getSelectedItem().toString();
        String description = txtDescription.getText().trim();
        String productBrand = txtProductName.getText().trim();
        String quantity = txtQuantity.getText().trim();
        String acquiredPrice = txtAcquiredPrice.getText().trim();
        String sellingPrice = txtSellingPrice.getText().trim();
        String productLocation = txtLocation.getText().trim();

        if (Validations.isNullOrBlank(uniqueId)) {
            JOptionPane.showMessageDialog(null, "¡Debes ingresar el ID del producto!",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (checkProductID) {
            JOptionPane.showMessageDialog(null, "¡El ID de producto ingresado ya existe en la base de datos!",  "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (Validations.isNullOrBlank(selectedCategory) || selectedCategory.equals("Seleccionar")) {
            JOptionPane.showMessageDialog(null, "¡Debes seleccionar una categoría para el producto!",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (Validations.isNullOrBlank(description)) {
            JOptionPane.showMessageDialog(null, "¡Debes ingresar la descripción del producto!",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (Validations.isNullOrBlank(quantity)) {
            JOptionPane.showMessageDialog(null, "¡Debes ingresar la cantidad de unidades existentes del producto!",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!quantity.matches(Validations.NUMBER_PATTERN)) {
            JOptionPane.showMessageDialog(null, "¡Debes escribir la cantidad del producto en números!",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        int nQuantity = Integer.parseInt(quantity); //se convierte la cantidad a valor entero
        if (nQuantity < 1) {
            JOptionPane.showMessageDialog(null, "¡La cantidad de productos ingresada debe ser mayor a cero!",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (Validations.isNullOrBlank(acquiredPrice)) {
            JOptionPane.showMessageDialog(null, "¡Debes ingresar el precio de adquisición del producto!",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!acquiredPrice.matches(Validations.NUMBER_PATTERN)) {
            JOptionPane.showMessageDialog(null, "¡Debes escribir el precio de adquisición del producto en números!",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (Validations.isNullOrBlank(sellingPrice)) {
            JOptionPane.showMessageDialog(null, "¡Debes ingresar el precio de venta del producto!",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!sellingPrice.matches(Validations.NUMBER_PATTERN)) {
            JOptionPane.showMessageDialog(null, "¡Debes escribir el precio de venta del producto en números!",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (Validations.isNullOrBlank(productLocation)) {
            JOptionPane.showMessageDialog(null, "¡Debes ingresar la ubicación del producto en el almacén!",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (Validations.isNullOrBlank(productBrand)) {
            productBrand = "No registrado";
        }

        try (Connection con = ConnectionProvider.getCon()) {

            // Obtener el PK de la categoría seleccionada
            String getCategoryPKQuery = "SELECT category_pk FROM productCategories WHERE categoryName = ?";
            PreparedStatement getCategoryPKStmt = con.prepareStatement(getCategoryPKQuery);
            getCategoryPKStmt.setString(1, selectedCategory);
            ResultSet rs = getCategoryPKStmt.executeQuery();

            if (rs.next()) {
                int categoryPK = rs.getInt("category_pk");

                // Insertar el producto en la base de datos
                String insertQuery = "INSERT INTO products(product_pk, category_pk, description, productBrand, quantity, acquiredPrice, sellingPrice, productLocation) "
                        + "VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
                try (PreparedStatement ps = con.prepareStatement(insertQuery)) {
                    ps.setString(1, uniqueId);
                    ps.setInt(2, categoryPK);
                    ps.setString(3, description);
                    ps.setString(4, productBrand);
                    ps.setString(5, quantity);
                    ps.setString(6, acquiredPrice);
                    ps.setString(7, sellingPrice);
                    ps.setString(8, productLocation);

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "¡Producto añadido exitosamente!",
                    "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    dispose();
                    new AddProduct().setVisible(true);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Categoría no encontrada en la base de datos.",  "Advertencia",
                        JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar el producto: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //botón para añadir nueva categoría de productos
        String newCategory = txtNewCategory.getText();

        if (!Validations.isNullOrBlank(newCategory)) {

            String checkQuery = "SELECT COUNT(*) FROM productCategories WHERE categoryName = ?";
            String insertQuery = "INSERT INTO productCategories(categoryName) VALUES (?)";

            try (Connection con = ConnectionProvider.getCon(); 
                    PreparedStatement checkStmt = con.prepareStatement(checkQuery); 
                    PreparedStatement insertStmt = con.prepareStatement(insertQuery)) {

                // Verificar si la categoría ya existe
                checkStmt.setString(1, newCategory);
                ResultSet rs = checkStmt.executeQuery();

                if (rs.next() && rs.getInt(1) > 0) {
                    JOptionPane.showMessageDialog(null, "La categoría ingresada ya existe.",  "Error", 
                            JOptionPane.ERROR_MESSAGE);
                    return; 
                }

                // Insertar la nueva categoría
                insertStmt.setString(1, newCategory);
                insertStmt.executeUpdate();
                JOptionPane.showMessageDialog(null, "¡Nueva categoría añadida!",
                    "Éxito", JOptionPane.INFORMATION_MESSAGE);

                // Actualizar la lista de categorías y limpiar el campo de texto
                loadCategories();
                txtNewCategory.setText("");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al añadir la nueva categoría: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debes ingresar el nombre de la nueva categoría",  "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtUniqueIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUniqueIdKeyReleased
        //verificar si el ID del producto ya existe
        String productID = txtUniqueId.getText().trim();

        if (!Validations.isNullOrBlank(productID)) {
            iconLabel.setVisible(true);
            iconLabel.setIcon(new ImageIcon("src\\images\\yes.png"));
            iconLabel.setText("");
            checkProductID = false;

            String query = "SELECT product_pk FROM products WHERE product_pk = ?";
            try (Connection con = ConnectionProvider.getCon(); PreparedStatement pst = con.prepareStatement(query)) {

                pst.setString(1, productID);

                try (ResultSet rs = pst.executeQuery()) {
                    if (rs.next()) {
                        checkProductID = true;
                        iconLabel.setIcon(new ImageIcon("src\\images\\no.png"));
                        iconLabel.setText("");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } else {
            iconLabel.setVisible(false);
        }
    }//GEN-LAST:event_txtUniqueIdKeyReleased

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        dispose();
    }//GEN-LAST:event_jLabel14MouseClicked

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        new AddProductHelp().setVisible(true);
    }//GEN-LAST:event_jLabel13MouseClicked

    private void txtQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyReleased
        String acquiredUnits = txtQuantity.getText().trim();

        if (!acquiredUnits.matches(Validations.NUMBER_PATTERN)) {
            JOptionPane.showMessageDialog(null, "¡Debes ingresar la cantidad de unidades en números!", "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtQuantity.setText("");
            return;
        }
    }//GEN-LAST:event_txtQuantityKeyReleased

    private void txtAcquiredPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAcquiredPriceKeyReleased
        String acquiredPrice = txtAcquiredPrice.getText().trim();

        if (!acquiredPrice.matches(Validations.NUMBER_PATTERN)) {
            JOptionPane.showMessageDialog(null, "¡Debes ingresar el precio en números!", "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtAcquiredPrice.setText("");
            return;
        }
    }//GEN-LAST:event_txtAcquiredPriceKeyReleased

    private void txtSellingPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSellingPriceKeyReleased
        String sellingPrice = txtSellingPrice.getText().trim();

        if (!sellingPrice.matches(Validations.NUMBER_PATTERN)) {
            JOptionPane.showMessageDialog(null, "¡Debes ingresar el precio en números!", "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtSellingPrice.setText("");
            return;
        }
    }//GEN-LAST:event_txtSellingPriceKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddProduct().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboCategory;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtAcquiredPrice;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtNewCategory;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSellingPrice;
    private javax.swing.JTextField txtUniqueId;
    // End of variables declaration//GEN-END:variables
}
